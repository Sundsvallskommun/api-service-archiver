//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2022.01.19 at 12:33:39 PM CET 
//


package vo;

import javax.annotation.Generated;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ArendeRelationEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ArendeRelationEnum"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="Ersätter"/&gt;
 *     &lt;enumeration value="Är ersatt med"/&gt;
 *     &lt;enumeration value="Referens"/&gt;
 *     &lt;enumeration value="Refereras av"/&gt;
 *     &lt;enumeration value="Egen relationsdefinition"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "ArendeRelationEnum")
@XmlEnum
@Generated(value = "com.sun.tools.xjc.Driver", date = "2022-01-19T12:33:39+01:00", comments = "JAXB RI v2.3.2")
public enum ArendeRelationEnum {

    @XmlEnumValue("Ers\u00e4tter")
    ERSÄTTER("Ers\u00e4tter"),
    @XmlEnumValue("\u00c4r ersatt med")
    ÄR_ERSATT_MED("\u00c4r ersatt med"),
    @XmlEnumValue("Referens")
    REFERENS("Referens"),
    @XmlEnumValue("Refereras av")
    REFERERAS_AV("Refereras av"),
    @XmlEnumValue("Egen relationsdefinition")
    EGEN_RELATIONSDEFINITION("Egen relationsdefinition");
    private final String value;

    ArendeRelationEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ArendeRelationEnum fromValue(String v) {
        for (ArendeRelationEnum c: ArendeRelationEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
