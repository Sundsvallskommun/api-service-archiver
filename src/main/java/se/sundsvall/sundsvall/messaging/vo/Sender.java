/*
 * Messaging API
 * API used to send messages, as e-mail or SMS
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.sundsvall.sundsvall.messaging.vo;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;
/**
 * Sender details
 */
@Schema(description = "Sender details")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-12-17T10:28:24.465012+01:00[Europe/Berlin]")
public class Sender {
  @JsonProperty("emailName")
  private String emailName = null;

  @JsonProperty("smsName")
  private String smsName = null;

  @JsonProperty("emailAddress")
  private String emailAddress = null;

  public Sender emailName(String emailName) {
    this.emailName = emailName;
    return this;
  }

   /**
   * Sender name for E-mail
   * @return emailName
  **/
  @Schema(description = "Sender name for E-mail")
  public String getEmailName() {
    return emailName;
  }

  public void setEmailName(String emailName) {
    this.emailName = emailName;
  }

  public Sender smsName(String smsName) {
    this.smsName = smsName;
    return this;
  }

   /**
   * Sender name for SMS
   * @return smsName
  **/
  @Schema(description = "Sender name for SMS")
  public String getSmsName() {
    return smsName;
  }

  public void setSmsName(String smsName) {
    this.smsName = smsName;
  }

  public Sender emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Sender e-mail address
   * @return emailAddress
  **/
  @Schema(description = "Sender e-mail address")
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sender sender = (Sender) o;
    return Objects.equals(this.emailName, sender.emailName) &&
        Objects.equals(this.smsName, sender.smsName) &&
        Objects.equals(this.emailAddress, sender.emailAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailName, smsName, emailAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sender {\n");
    
    sb.append("    emailName: ").append(toIndentedString(emailName)).append("\n");
    sb.append("    smsName: ").append(toIndentedString(smsName)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
