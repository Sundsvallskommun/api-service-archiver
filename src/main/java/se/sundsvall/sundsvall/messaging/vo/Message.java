/*
 * Messaging API
 * API used to send messages, as e-mail or SMS
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.sundsvall.sundsvall.messaging.vo;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;
/**
 * A message to be sent
 */
@Schema(description = "A message to be sent")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-12-17T10:28:24.465012+01:00[Europe/Berlin]")
public class Message {
  @JsonProperty("sender")
  private AllOfMessageSender sender = null;

  @JsonProperty("recipientId")
  private String recipientId = null;

  @JsonProperty("subject")
  private String subject = null;

  @JsonProperty("message")
  private String message = null;

  public Message sender(AllOfMessageSender sender) {
    this.sender = sender;
    return this;
  }

   /**
   * Get sender
   * @return sender
  **/
  @Schema(description = "")
  public AllOfMessageSender getSender() {
    return sender;
  }

  public void setSender(AllOfMessageSender sender) {
    this.sender = sender;
  }

  public Message recipientId(String recipientId) {
    this.recipientId = recipientId;
    return this;
  }

   /**
   * The message recipient ID
   * @return recipientId
  **/
  @Schema(example = "f427952b-247c-4d3b-b081-675a467b3619", required = true, description = "The message recipient ID")
  public String getRecipientId() {
    return recipientId;
  }

  public void setRecipientId(String recipientId) {
    this.recipientId = recipientId;
  }

  public Message subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The message subject (for e-mails)
   * @return subject
  **/
  @Schema(description = "The message subject (for e-mails)")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public Message message(String message) {
    this.message = message;
    return this;
  }

   /**
   * The message text
   * @return message
  **/
  @Schema(required = true, description = "The message text")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.sender, message.sender) &&
        Objects.equals(this.recipientId, message.recipientId) &&
        Objects.equals(this.subject, message.subject) &&
        Objects.equals(this.message, message.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sender, recipientId, subject, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    recipientId: ").append(toIndentedString(recipientId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
