/*
 * Messaging API
 * API used to send messages, as e-mail or SMS
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.sundsvall.sundsvall.messaging.vo;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;
/**
 * SMS representation
 */
@Schema(description = "SMS representation")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-12-17T10:28:24.465012+01:00[Europe/Berlin]")
public class SmsRequest {
  @JsonProperty("sender")
  private String sender = null;

  @JsonProperty("recipientId")
  private String recipientId = null;

  @JsonProperty("mobileNumber")
  private String mobileNumber = null;

  @JsonProperty("message")
  private String message = null;

  public SmsRequest sender(String sender) {
    this.sender = sender;
    return this;
  }

   /**
   * The sender of the SMS
   * @return sender
  **/
  @Schema(required = true, description = "The sender of the SMS")
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }

  public SmsRequest recipientId(String recipientId) {
    this.recipientId = recipientId;
    return this;
  }

   /**
   * Recipient ID
   * @return recipientId
  **/
  @Schema(description = "Recipient ID")
  public String getRecipientId() {
    return recipientId;
  }

  public void setRecipientId(String recipientId) {
    this.recipientId = recipientId;
  }

  public SmsRequest mobileNumber(String mobileNumber) {
    this.mobileNumber = mobileNumber;
    return this;
  }

   /**
   * The mobile phone number to send the SMS to. (Should start with +467x)
   * @return mobileNumber
  **/
  @Schema(required = true, description = "The mobile phone number to send the SMS to. (Should start with +467x)")
  public String getMobileNumber() {
    return mobileNumber;
  }

  public void setMobileNumber(String mobileNumber) {
    this.mobileNumber = mobileNumber;
  }

  public SmsRequest message(String message) {
    this.message = message;
    return this;
  }

   /**
   * The SMS message contents
   * @return message
  **/
  @Schema(required = true, description = "The SMS message contents")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmsRequest smsRequest = (SmsRequest) o;
    return Objects.equals(this.sender, smsRequest.sender) &&
        Objects.equals(this.recipientId, smsRequest.recipientId) &&
        Objects.equals(this.mobileNumber, smsRequest.mobileNumber) &&
        Objects.equals(this.message, smsRequest.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sender, recipientId, mobileNumber, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmsRequest {\n");
    
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    recipientId: ").append(toIndentedString(recipientId)).append("\n");
    sb.append("    mobileNumber: ").append(toIndentedString(mobileNumber)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
