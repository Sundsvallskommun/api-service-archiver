/*
 * Messaging API
 * API used to send messages, as e-mail or SMS
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.sundsvall.sundsvall.messaging.vo;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * TechnicalDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-12-17T10:28:24.465012+01:00[Europe/Berlin]")
public class TechnicalDetails {
  @JsonProperty("rootCode")
  private Integer rootCode = null;

  @JsonProperty("rootCause")
  private String rootCause = null;

  @JsonProperty("serviceId")
  private String serviceId = null;

  @JsonProperty("requestId")
  private String requestId = null;

  @JsonProperty("details")
  private List<String> details = null;

  public TechnicalDetails rootCode(Integer rootCode) {
    this.rootCode = rootCode;
    return this;
  }

   /**
   * Get rootCode
   * @return rootCode
  **/
  @Schema(description = "")
  public Integer getRootCode() {
    return rootCode;
  }

  public void setRootCode(Integer rootCode) {
    this.rootCode = rootCode;
  }

  public TechnicalDetails rootCause(String rootCause) {
    this.rootCause = rootCause;
    return this;
  }

   /**
   * Get rootCause
   * @return rootCause
  **/
  @Schema(description = "")
  public String getRootCause() {
    return rootCause;
  }

  public void setRootCause(String rootCause) {
    this.rootCause = rootCause;
  }

  public TechnicalDetails serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

   /**
   * Get serviceId
   * @return serviceId
  **/
  @Schema(description = "")
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }

  public TechnicalDetails requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Get requestId
   * @return requestId
  **/
  @Schema(description = "")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public TechnicalDetails details(List<String> details) {
    this.details = details;
    return this;
  }

  public TechnicalDetails addDetailsItem(String detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @Schema(description = "")
  public List<String> getDetails() {
    return details;
  }

  public void setDetails(List<String> details) {
    this.details = details;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TechnicalDetails technicalDetails = (TechnicalDetails) o;
    return Objects.equals(this.rootCode, technicalDetails.rootCode) &&
        Objects.equals(this.rootCause, technicalDetails.rootCause) &&
        Objects.equals(this.serviceId, technicalDetails.serviceId) &&
        Objects.equals(this.requestId, technicalDetails.requestId) &&
        Objects.equals(this.details, technicalDetails.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rootCode, rootCause, serviceId, requestId, details);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TechnicalDetails {\n");
    
    sb.append("    rootCode: ").append(toIndentedString(rootCode)).append("\n");
    sb.append("    rootCause: ").append(toIndentedString(rootCause)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
