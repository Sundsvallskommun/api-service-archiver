/*
 * Messaging API
 * API used to send messages, as e-mail or SMS
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.sundsvall.sundsvall.messaging.vo;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * E-mail representation
 */
@Schema(description = "E-mail representation")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-12-17T10:28:24.465012+01:00[Europe/Berlin]")
public class EmailRequest {
  @JsonProperty("sender")
  private Sender1 sender = null;

  @JsonProperty("emailAddress")
  private String emailAddress = null;

  @JsonProperty("recipientId")
  private String recipientId = null;

  @JsonProperty("subject")
  private String subject = null;

  @JsonProperty("message")
  private String message = null;

  @JsonProperty("htmlMessage")
  private String htmlMessage = null;

  @JsonProperty("attachments")
  private List<Attachment> attachments = null;

  public EmailRequest sender(Sender1 sender) {
    this.sender = sender;
    return this;
  }

   /**
   * Get sender
   * @return sender
  **/
  @Schema(description = "")
  public Sender1 getSender() {
    return sender;
  }

  public void setSender(Sender1 sender) {
    this.sender = sender;
  }

  public EmailRequest emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Recipient e-mail address
   * @return emailAddress
  **/
  @Schema(description = "Recipient e-mail address")
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }

  public EmailRequest recipientId(String recipientId) {
    this.recipientId = recipientId;
    return this;
  }

   /**
   * Recipient ID
   * @return recipientId
  **/
  @Schema(example = "f7b379e6-3e0b-4f32-9812-e10279dd3d0a", description = "Recipient ID")
  public String getRecipientId() {
    return recipientId;
  }

  public void setRecipientId(String recipientId) {
    this.recipientId = recipientId;
  }

  public EmailRequest subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * E-mail subject
   * @return subject
  **/
  @Schema(description = "E-mail subject")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public EmailRequest message(String message) {
    this.message = message;
    return this;
  }

   /**
   * E-mail plain-text body
   * @return message
  **/
  @Schema(required = true, description = "E-mail plain-text body")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public EmailRequest htmlMessage(String htmlMessage) {
    this.htmlMessage = htmlMessage;
    return this;
  }

   /**
   * E-mail HTML body (BASE64-encoded)
   * @return htmlMessage
  **/
  @Schema(description = "E-mail HTML body (BASE64-encoded)")
  public String getHtmlMessage() {
    return htmlMessage;
  }

  public void setHtmlMessage(String htmlMessage) {
    this.htmlMessage = htmlMessage;
  }

  public EmailRequest attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public EmailRequest addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Attachments
   * @return attachments
  **/
  @Schema(description = "Attachments")
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailRequest emailRequest = (EmailRequest) o;
    return Objects.equals(this.sender, emailRequest.sender) &&
        Objects.equals(this.emailAddress, emailRequest.emailAddress) &&
        Objects.equals(this.recipientId, emailRequest.recipientId) &&
        Objects.equals(this.subject, emailRequest.subject) &&
        Objects.equals(this.message, emailRequest.message) &&
        Objects.equals(this.htmlMessage, emailRequest.htmlMessage) &&
        Objects.equals(this.attachments, emailRequest.attachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sender, emailAddress, recipientId, subject, message, htmlMessage, attachments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailRequest {\n");
    
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    recipientId: ").append(toIndentedString(recipientId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    htmlMessage: ").append(toIndentedString(htmlMessage)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
